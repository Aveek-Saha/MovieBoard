datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    oauth_token              String? @db.Text
    oauth_token_secret       String? @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    username      String?    @unique
    role          Role       @default(reviewer)
    reviewer      Reviewer?
    moderator     Moderator?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Reviewer {
    id        String       @id @default(cuid())
    userId    String       @unique
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    reviews   Review[]     @relation(name: "UserReview")
    following MovieBoard[]
    likes     Review[]     @relation(name: "UserLiked")
}

model Moderator {
    id        String       @id @default(cuid())
    userId    String       @unique
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    moderates MovieBoard[]
}

model MovieBoard {
    id             String      @id @default(cuid())
    backdrop_path  String
    genres         Int[]
    title          String
    original_title String
    overview       String
    poster_path    String
    release_date   String
    imdb_id        String
    status         String
    followers      Reviewer[]
    rating         Float
    reviews        Review[]
    moderators     Moderator[]
}

model Review {
    id            String     @id @default(cuid())
    heading       String
    body          String
    created_on    DateTime   @default(now())
    last_modified DateTime   @updatedAt
    boardId       String
    movieBoard    MovieBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
    userId        String
    user          Reviewer   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserReview")
    rating        Int
    likes         Int
    likedBy       Reviewer[] @relation(name: "UserLiked")

    @@unique(fields: [id, userId], name: "review_id")
}

enum Role {
    reviewer
    moderator
}
